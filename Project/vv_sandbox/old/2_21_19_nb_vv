{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"2_21_19_nb_vv","version":"0.3.2","provenance":[],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"metadata":{"id":"aRpyAKGvvXlr","colab_type":"text"},"cell_type":"markdown","source":["# Introduction\n","\n","Today, we will be doing the following:\n","* Create a vanilla RNN (encode `tanh` activation functions and learn weights for the functions in the partitioned and unpartitioned models)\n","* Write our own loss function\n","\n","Optional:\n","* Try out `dropout`, $L_2$, and `weight decay` regularization methods for the partitioned and unpartitioned models  "]},{"metadata":{"id":"npmGM9_BRJy0","colab_type":"text"},"cell_type":"markdown","source":["# Setup"]},{"metadata":{"id":"xs3E-zMxw2Sx","colab_type":"code","colab":{}},"cell_type":"code","source":["from tensorflow.examples.tutorials.mnist import input_data\n","import torch"],"execution_count":0,"outputs":[]},{"metadata":{"id":"KmeqVDIox5mU","colab_type":"code","outputId":"8a8767b1-b6e0-433f-b925-5e440df717e2","executionInfo":{"status":"ok","timestamp":1553211177031,"user_tz":240,"elapsed":994,"user":{"displayName":"Vinay Viswanadham","photoUrl":"","userId":"17038328966780750763"}},"colab":{"base_uri":"https://localhost:8080/","height":411}},"cell_type":"code","source":["# Import tensorflow's MNIST data handle\n","mnist = input_data.read_data_sets('MNIST_data', one_hot=True)"],"execution_count":3,"outputs":[{"output_type":"stream","text":["WARNING:tensorflow:From <ipython-input-3-71e12f4bac70>:1: read_data_sets (from tensorflow.contrib.learn.python.learn.datasets.mnist) is deprecated and will be removed in a future version.\n","Instructions for updating:\n","Please use alternatives such as official/mnist/dataset.py from tensorflow/models.\n","WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/tensorflow/contrib/learn/python/learn/datasets/mnist.py:260: maybe_download (from tensorflow.contrib.learn.python.learn.datasets.base) is deprecated and will be removed in a future version.\n","Instructions for updating:\n","Please write your own downloading logic.\n","WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/tensorflow/contrib/learn/python/learn/datasets/mnist.py:262: extract_images (from tensorflow.contrib.learn.python.learn.datasets.mnist) is deprecated and will be removed in a future version.\n","Instructions for updating:\n","Please use tf.data to implement this functionality.\n","Extracting MNIST_data/train-images-idx3-ubyte.gz\n","WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/tensorflow/contrib/learn/python/learn/datasets/mnist.py:267: extract_labels (from tensorflow.contrib.learn.python.learn.datasets.mnist) is deprecated and will be removed in a future version.\n","Instructions for updating:\n","Please use tf.data to implement this functionality.\n","Extracting MNIST_data/train-labels-idx1-ubyte.gz\n","WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/tensorflow/contrib/learn/python/learn/datasets/mnist.py:110: dense_to_one_hot (from tensorflow.contrib.learn.python.learn.datasets.mnist) is deprecated and will be removed in a future version.\n","Instructions for updating:\n","Please use tf.one_hot on tensors.\n","Extracting MNIST_data/t10k-images-idx3-ubyte.gz\n","Extracting MNIST_data/t10k-labels-idx1-ubyte.gz\n","WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/tensorflow/contrib/learn/python/learn/datasets/mnist.py:290: DataSet.__init__ (from tensorflow.contrib.learn.python.learn.datasets.mnist) is deprecated and will be removed in a future version.\n","Instructions for updating:\n","Please use alternatives such as official/mnist/dataset.py from tensorflow/models.\n"],"name":"stdout"}]},{"metadata":{"id":"SA2-gSUI76_L","colab_type":"code","colab":{}},"cell_type":"code","source":["# generate a training dataset\n","image_count = 10000\n","data = mnist.train.next_batch(image_count)\n","\n","images = data[0]\n","labels = data[1]"],"execution_count":0,"outputs":[]},{"metadata":{"id":"qn5dsB72MwpK","colab_type":"text"},"cell_type":"markdown","source":["Each training instance will scan down the 28x28 image; at time $t_i ,\\; i = 1 \\dots 28$, the model will take in a 1x28 row vector of pixels. The pattern of outputs will be associated with the class label that we present to the network. "]},{"metadata":{"id":"6viVdlkV7sxh","colab_type":"code","colab":{}},"cell_type":"code","source":["# create an input from the MNIST numbers in `data`\n","input_mnist = torch.tensor(data = images) # a tensor of the MNIST digits.\n","# note that Tensorflow's MNIST class labels are already one-hot encoded\n","output_mnist = torch.tensor(data = labels)"],"execution_count":0,"outputs":[]},{"metadata":{"id":"oGRbM_0jSoO3","colab_type":"text"},"cell_type":"markdown","source":["# Building an RNN\n","\n","We are building the RNN with PyTorch (see https://deepsense.ai/keras-or-pytorch/ for a comparison). We will be closely hewing to the tutorials https://blog.keras.io/a-ten-minute-introduction-to-sequence-to-sequence-learning-in-keras.html and https://pytorch.org/tutorials/intermediate/char_rnn_classification_tutorial.html\n","\n"]},{"metadata":{"id":"qrsTcx6YIYb6","colab_type":"code","colab":{}},"cell_type":"code","source":["# create a basic RNN\n","\n","class basicRNN (torch.nn.Module):\n","  def __init__(self, input_size, hidden_size, output_size):\n","      # initialize\n","    super(basicRNN, self).__init__()\n","    \n","    self.hidden_size = hidden_size\n","    self.i2h = torch.nn.Linear(input_size + hidden_size, hidden_size) # linear combination\n","    self.i2o = torch.nn.Linear(input_size + hidden_size, output_size) # linear combination\n","    self.softmax = torch.nn.LogSoftmax(dim=1)\n","\n","  def forward(self, instate, hidden):\n","    # the forward function\n","    combined = torch.cat((instate, hidden), 1) # combine the new inputs and the state of the hidden layer from the past training timepoint\n","    hidden = self.i2h(combined) # generate the state of the hidden layer\n","    output = self.i2o(combined) # generate the input going to the output\n","    output = self.tanh(output) # put the combined input through the tanh activation function as the output\n","    return output, hidden # return the output and the hidden state\n","\n","  def initHidden(self):\n","    return torch.zeros(1, self.hidden_size) # initialize the hidden layer. This will be useful when starting the training sequence\n"],"execution_count":0,"outputs":[]},{"metadata":{"id":"baqORbD4NoCU","colab_type":"code","colab":{}},"cell_type":"code","source":["n_hidden = 10 # is there an algorithmic way to search for the number of hidden neurons we would like per layer?\n","n_row_pixels = 28 # our RNN will scan through each image row layer in order to learn the digit being reported from the network. \n","n_number_labels = 10 # MNIST digits go from 0 - 9, but the class label is effectively categorical. we will represent the output as a one-hot 1x10 vector. \n","test_rnn = basicRNN(input_size=n_row_pixels, hidden_size = n_hidden, output_size = n_number_labels) # initialize the RNN"],"execution_count":0,"outputs":[]},{"metadata":{"id":"uRYSYBxIVaIP","colab_type":"code","colab":{}},"cell_type":"code","source":["# specify a loss function\n","criterion = torch.nn.NLLLoss() # The negative log likelihood loss. It is useful to train a classification problem with `C` classes. See https://pytorch.org/docs/stable/_modules/torch/nn/modules/loss.html"],"execution_count":0,"outputs":[]},{"metadata":{"id":"x5sqnYoJRCog","colab_type":"text"},"cell_type":"markdown","source":["# Training"]},{"metadata":{"id":"kX6GuffkZqgc","colab_type":"text"},"cell_type":"markdown","source":["## Setup for training"]},{"metadata":{"id":"RSdxqpGsQV9T","colab_type":"code","colab":{}},"cell_type":"code","source":["learning_rate = 0.005 # How can we determine when to change the learning rate and to what? This itself is an interesting optimization problem\n","\n","def train(input_tensor, output_tensor, in_rnn, loss_criterion):\n","    hidden = in_rnn.initHidden() # the hidden state is empty, since the network has not seen anything yet\n","\n","    in_rnn.zero_grad() # initially, set parameter gradients to zero\n","    \n","    # for every training example that we see, get the network's output and input.\n","    # Remember to feed the hidden state of the network into the next example that the network sees. \n","    # go through each block of 28 \n","    block_size = math.sqrt(input_tensor.size()[0])\n","    for i in range(input_tensor.size()[0]):\n","#      print(input_tensor)\n","      output, hidden = in_rnn(input_tensor[i,], hidden)\n","    \n","    # compute the value of the loss function\n","    loss = loss_criterion(output, category_tensor)\n","    # backpropogate the errors\n","    loss.backward()\n","\n","    # Add parameters' gradients to their values, multiplied by learning rate. This is the parameter update step\n","    for p in in_rnn.parameters():\n","        p.data.add_(-learning_rate, p.grad.data)\n","\n","    return output, loss.item()\n","\n","  \n","import random\n","\n","# \n","def randomChoice(l):\n","  # given some tensor, this function spits out a random row\n","    return(random.randint(0, len(l) - 1))\n","\n","def randomTrainingExample(input_tensor,output_tensor):\n","  # spit out a random digit (really, a 1x(28^2) row vector)\n","  rand_row = randomChoice(output_mnist)\n","  randinput = input_tensor[rand_row,]\n","  randoutput = output_tensor[rand_row,]\n","  return randinput, randoutput\n","\n","# for i in range(10):\n","#     i_input, i_output = randomTrainingExample(input_mnist,output_mnist)\n","# #    plt.plot(i_input.numpy())\n","#     plt.imshow(i_input.numpy)\n","# #    print('digit =', category, '/ line =', line)\n"],"execution_count":0,"outputs":[]},{"metadata":{"id":"UkMiTe1gh2OU","colab_type":"text"},"cell_type":"markdown","source":["## Loading training and testing sets\n","\n","Taken from https://medium.com/dair-ai/building-rnns-is-fun-with-pytorch-and-google-colab-3903ea9a3a79"]},{"metadata":{"id":"aLX8xjL8hxXO","colab_type":"code","colab":{}},"cell_type":"code","source":["import torchvision\n","import torchvision.transforms as transforms\n","\n","BATCH_SIZE = 64\n","\n","# list all transformations\n","transform = transforms.Compose(\n","    [transforms.ToTensor()])\n","\n","# download and load training dataset\n","trainset = torchvision.datasets.MNIST(root='./data', train=True,\n","                                        download=True, transform=transform)\n","trainloader = torch.utils.data.DataLoader(trainset, batch_size=BATCH_SIZE,\n","                                          shuffle=True, num_workers=2)\n","\n","# download and load testing dataset\n","testset = torchvision.datasets.MNIST(root='./data', train=False,\n","                                       download=True, transform=transform)\n","testloader = torch.utils.data.DataLoader(testset, batch_size=BATCH_SIZE,\n","                                         shuffle=False, num_workers=2)\n","\n"],"execution_count":0,"outputs":[]},{"metadata":{"id":"W0WiGaP_gvRH","colab_type":"code","outputId":"439c5ac9-1786-43dc-8eb0-ff4e2f2a8d43","executionInfo":{"status":"error","timestamp":1553212306382,"user_tz":240,"elapsed":336,"user":{"displayName":"Vinay Viswanadham","photoUrl":"","userId":"17038328966780750763"}},"colab":{"base_uri":"https://localhost:8080/","height":470}},"cell_type":"code","source":["hidden = test_rnn.initHidden() # the hidden state is empty, since the network has not seen anything yet\n","print(hidden)\n","\n","test_rnn.zero_grad() # initially, set parameter gradients to zero\n","\n","# initialize the class\n","output, hidden = test_rnn(input_mnist[0,], hidden)\n","# error is being thrown within the forward function. "],"execution_count":18,"outputs":[{"output_type":"stream","text":["tensor([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]])\n"],"name":"stdout"},{"output_type":"error","ename":"RuntimeError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mRuntimeError\u001b[0m                              Traceback (most recent call last)","\u001b[0;32m<ipython-input-18-dcd065b0fff8>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0;31m# initialize the class\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 7\u001b[0;31m \u001b[0moutput\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mhidden\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtest_rnn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minput_mnist\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mhidden\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      8\u001b[0m \u001b[0;31m# error is being thrown within the forward function.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/torch/nn/modules/module.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, *input, **kwargs)\u001b[0m\n\u001b[1;32m    487\u001b[0m             \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_slow_forward\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0minput\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    488\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 489\u001b[0;31m             \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mforward\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0minput\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    490\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0mhook\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_forward_hooks\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvalues\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    491\u001b[0m             \u001b[0mhook_result\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mhook\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minput\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mresult\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-6-82d93e0e6c83>\u001b[0m in \u001b[0;36mforward\u001b[0;34m(self, input, hidden)\u001b[0m\n\u001b[1;32m     12\u001b[0m   \u001b[0;32mdef\u001b[0m \u001b[0mforward\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minput\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mhidden\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     13\u001b[0m     \u001b[0;31m# the forward function\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 14\u001b[0;31m     \u001b[0mcombined\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtorch\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcat\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minput\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mhidden\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;31m# combine the new inputs and the state of the hidden layer from the past training timepoint\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     15\u001b[0m     \u001b[0mhidden\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mi2h\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcombined\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;31m# generate the state of the hidden layer\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     16\u001b[0m     \u001b[0moutput\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mi2o\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcombined\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;31m# generate the input going to the output\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mRuntimeError\u001b[0m: Dimension out of range (expected to be in range of [-1, 0], but got 1)"]}]},{"metadata":{"id":"7_reECEdksHI","colab_type":"code","outputId":"2924b5d6-ca0b-4ab7-9b7a-ccefc4ea8c30","executionInfo":{"status":"ok","timestamp":1553211388658,"user_tz":240,"elapsed":804,"user":{"displayName":"Vinay Viswanadham","photoUrl":"","userId":"17038328966780750763"}},"colab":{"base_uri":"https://localhost:8080/","height":350}},"cell_type":"code","source":["import matplotlib.pyplot as plt\n","import numpy as np\n","\n","# functions to show an image\n","def imshow(img):\n","    #img = img / 2 + 0.5     # unnormalize\n","    npimg = img.numpy()\n","    plt.imshow(np.transpose(npimg, (1, 2, 0)))\n","\n","# get some random training images\n","dataiter = iter(trainloader)\n","images, labels = dataiter.next()\n","\n","# show images\n","imshow(torchvision.utils.make_grid(images))\n"],"execution_count":15,"outputs":[{"output_type":"display_data","data":{"image/png":"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\nIDk5uYS1U3geadKkCaytrcX/o6OjAQDZ2dmypqtEogoKCgpm8MJGoqVKlYKHhwfq1KkDAOjRo4d4\n7rXXXhO3w1BHfiVNo0aNAADe3t4AABcXFyWiMsD8+fPRq1cvjWOxsbGyRxX6aN68OUaNGoVRo0YB\nyC9/ACAIAr7//nvMmDGjRPR62WnRooX47k+fPh2lS//r0i5cuAAAeOONN+RVoshVaWVEnTxMXCDV\nzc2NO3fu1NjPXb31hvrv06dP8/Tp0yWyKGxhsbW15fr167l+/Xpx24IqVaqUuF6WlqLyunPnzrx9\n+zZv377N7Oxs5ubmUqVSMSYmhjExMaxQoYJF9W3ZsiXXrVvHdevWMTk5We+e5llZWZw3b16x7S6u\nuLq6cuLEiVy9ejUnTpwo/t2uXTuLPaNKlSpx7NixTEpKYlJSkrj9jZqMjAyOGzdOlrRbtGjBzMxM\nLT9QWAruQGpO2dXrx6R2jKZQ3ALWv39/qlQqpqamcvr06Zw+fTqbNGkiyo0bN5iYmMjExESLFSZD\n4ubmppGpJFm6dGnZ0nN1daWrqyu7devG+/fva6WtUqn48ccfW/w5GMrrjRs38v79+8zNzdUQ9R5Z\njx49Ys+ePS2iZ926dblp0yYmJSXp3TmhoBNVS3HsNkdGjhwp6lBQn5iYGDZo0ED259SmTRtevnxZ\no3xlZWVxz549DA8PF8taamoq3d3dJU3bycmJf/31l5bDPHnypJZOKpWKLVq0MLvs6vVjsnhHIylu\nAStdujTt7OxYrlw5rXNNmzZlcnIy79y5wzt37ljkpStK3nvvPS1HJmd6u3fv5u7du7Ucktop5ebm\nMjU1lX369GGfPn0s9hz02b1x40aS1BlFFD4+cOBA2fSzsrKilZWVzq1mnicnOmjQIA4aNIjJycli\n7UuN+u+AgABZnpG1tTWHDBnCIUOG8OnTp1SpVHz27BlnzpzJmTNnsmbNmgTAChUqkCQzMzMZGxtL\nNzc3SfUYMGCAmPaqVau4atUq1qhRgzY2NrSzs+P06dM1ys2pU6cMbq1uTNnVh9KxpKCgoGAOEgWV\nxUKdPCT6OpUtW5YhISFUqVR8/fXX+frrr8sWtZgiK1eupCAIFASB2dnZktpcUIYMGcLo6Gjx65uQ\nkMCoqCgNuX79OlNTU8VoNDU1ld7e3rS3t6eTk5Osz6Gw3Z07d2bnzp3FJgdDkbNa/vrrL1l069mz\n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\nq1cv6tWrF+nq6hIRUVZWFhERnT17ls6ePUu6uroa0zUmJoY4jqP58+fT/PnzNZZuSXn93XffFWvO\nd+jQQXCdRo8eTRzHkY2NjdRxPT09OnjwIMvD9PR0ysrKon379tHNmzfZ8f79+6tkt7qFb877+/tr\nLM3CcubMGZJIJPTu3TsiIsH7+2/dusWa8i9fviRjY+Ni11SuXJl2794t1ex/+fIlGRkZKZxOiX5M\nEO+oIOouYPyDevTokcYKjYuLC7m4uFBqaqrc+Y+Fj1+4cIGIiB4+fCh13MrKSiP67ty5kziOo8DA\nQNLW1iZtbW2NPauS8vrUqVNERFIvn8J93ULJ3r17ZTrRw4cPM+eZnp5O3377LZtvaGpqyvoFR48e\nrZLdsqRjx4506NAh8vf3ZwNGivbj8QNLhw4d0li+AgUDiObm5hQSEkISiYRevXpFRETVqlUTLE07\nOzvKzs5mjvHx48dkYGAg81oLCwt68uSJlCM9deqUUmVXrh8TxDsqSFkKWEmSmZlJ+fn51KZNG8EL\njb6+Ph05coQyMzNZui9evKBRo0ax6UxWVlbk7OxMFy9eZCPh/KTznJwcKSfKjygKLdeuXSOO42jL\nli0aSa9oQZR13NzcnN6/fy/1PAICAsjc3Fxwnf744w+ZTpTjOAoODqbWrVtT69ati913/vx5On/+\nvNqcaK1atejGjRt048YNVpssPPrN/9+xY0eZ9xed4lSWwRNVpGXLltSyZUuNjs7369dPyimWNkhq\nbW3NWoT8QNOECRMULrvyUKhPdN26dbh37x7y8/Px7bffwsHBAfPnz4dEIoGVlRXWr1+PypUr4+TJ\nk/D19YW2tjbc3Nzg6uqqyNeLiIiIfLqUVlsMDg6mSZMmERFRUlISdevWjRYuXEhnzpwhIiJvb2/y\n8/OjjIwM6t27N6WmplJWVhZ9/fXX9OHDB43VRKdMmUJEROnp6YK/dY2MjGjp0qVSTfbo6OgSJ8/z\ny1PDwsKIqPjyx8OHDwuqs62tLdna2tK7d+8oLS1N7RPKFZHCee3g4EC9e/em3r1708WLF9nziIiI\noIiICLK0tNSIThs3bqTXr1+TqakpOzZ58mRKSUmhL7/8UuY91tbWrGWhrpqoq6sr5eXlUV5eHmuS\n838L///q1atiTfyOHTvSy5cv6eXLl2qZJ1oW+RhqomfPni31Hn7a059//sn6RhUtu3L9WGlOND8/\nnzIyMtj/7dq1I2dnZ8rJySEiopCQEJo+fTrdvHmT5syZw+776aef6NKlSxpzoo8fPyaO42jv3r2C\nFxh3d3fm/IKDgyk4OFjhvp/atWvLdKJLliwRVGdHR0dydHTU2DOSVxBdXV3p/v37lJCQILPvmO+D\n/O+//+iHH36Q2ZRWp8yYMaOYEz137hzNmDFD7j1169ZlzkKRLgdFynjhprusQSF+MEtWE7+0ezUh\nH4MTnT59ulL5znEcpaSkKFx25VFqc15HRweGhoYACoLUdu3aFdevX2dr1S0tLREfH4+EhARYWFiw\n+ywsLBAfH1/a16sMH0exYcOGAIDNmzfLvZZfLy5raoYyFF4zz0/B4adTlEZ0dDQA4MiRIxg+fDhb\n82xvb6+STqUxevRo9j8/5aM88PPzg46Ojtz13fy0MAcHB6xfvx6ZmZmsHG3fvh1Hjx5Va7i85ORk\n2NraQl9fHykpKVLHC1O/fn1kZ2fDxcUFU6dOZcf5eKOqMHv2bDY1CYDMZ+Pm5ob27dtLhb3T1tZm\n4fFKulcTODk5AfhfWEVNBGPOzc2VCvzM+4CS0NHRAfC/OMD8lENVUDiy/cWLF7Fz5078/vvv6N27\nN4uk/erVKyxYsACjRo3Cw4cPsXjxYgDApk2bYGtrW2KA2LCwMMGdh4iIiIiQKLRi6dq1a9ixYwd2\n7doFY2NjGBoaIjs7GwDw7t07WFtbw9raGgkJCeye9+/fw9rausTvdXBwAFDw1iqrXLhwARcuXAAR\n4enTpyVe6+LiAhcXF5XS09LSwqRJk/D27VtIJBJ4e3vD29sbpqamCt8PAF999RU4joNEIoFEIsGj\nR4+we/du9OzZU2X9ZElgYCACAwMBAOPGjRMkDXnSuHFjFmmHrzHxkYoKS0nHC58LCwuDu7s73N3d\n1aIfAOzcuRMmJiYwMTFh5UmeZGdnY8GCBViwYIHC31/S+Tlz5rCaKB+9yc3NTUr484Wvk3Xs8OHD\nGs1bXo4cOYIjR44wPfz9/VX+bSsiiYmJLF+uXbtW4rW6urpYsWIFVqxYwfJx9OjRCuehPEptzqel\npWHdunX4448/YGZmBqAgFNb58+cxaNAgXLhwAV26dIGjoyM8PT2RmpoKHR0dhISEsFqpUNSsWZNt\nAAcUNJE1wV9//YW+ffti8ODBrGk1btw4bN26lWUOAPaMtLSKR3Lnt+bgadKkCRo0aIArV64IojO/\n9xMRsZBrmsLS0pL9z//gs7KyEBERAaBgtda5c+dk3jtlyhSYmpoC+F8TrGnTpsyGw4cPq6xfQEAA\nvvnmG7b6JT8/n+laGC0tLWRmZmLixInMSaiDjRs3Yv369eyF0b59exw8eLBYM71o0/1jas4X5cyZ\nMxrZpmTTpk1YsWIFgIIusZEjR+LQoUNSL189PT1YWFhgx44dbDeH7OxsLFmyBAcOHFBdiRJ7TIno\n0KFD1LlzZ/Lw8GDy+vVrGjduHI0YMYLmzJlDubm5RFSw+sbFxYVcXV3p77//Lu2rFe50lyfz5s2T\n6lhu0aJFidc3adKEmjRpopZO7YkTJ1JQUJDcSfUlHSeSHZz40qVLgnXCJycnU3JyMqWkpGh0dVRh\n4cvIsWPHlFqNpKenR3p6emyOX2FRh17GxsZ07ty5UiMU3bt3jwYNGlQmu0u7pmhgZXmDSNHR0UpP\nwBdaqlevTtHR0RQdHc30bdGihUq/bUWlatWq9N9//9F///3H/MDRo0dp3LhxtH79elq/fj1FREQQ\nEUlFdxs+fLjSeSiPT3q3z6ioKNStWxdAwaCXu7u7Rt/Eurq6rEN90KBB6Nq1K7744oti1xWtiero\n6EAikWD79u1ssKtr164YOHAga3KrG36gxNvbm725NY0qeS00xsbGWL9+PQDgm2++YXnGxzRYv349\nCxitLIrYXbNmTbZZIJ/24cOHi+2nFBsbi1u3bpVJD6Hw9PTEsmXL2Od///0XvXr1QkpKikbyu2rV\nqgAKxm2aN28us+WXlpaGQ4cOYcuWLQDA9stSlBL9SqnVRQHhk0cZ3kC1atWi5ORk9vYZMGBAub+R\nFZWy2qyK8DVReXMfK6rdH4NUdLuLxh/la3matrtq1aq0fPlyCg8PJ47jWJn38fGhL774QuU8lIcY\nCk9EREREBT6pUHiFWbRoEUxMTJCYmAigIESXiHz4OZBv374tZ01EKjqvX78ul3QTEhKwZMkStl26\npvhknSi/n/nu3bsBQLhNqCoIderUKW8VREQqJJ+sE5U1gCMiIiKiaT5ZJyoiIvJxcObMGTZf28jI\nqNya8+XFJz3F6VPlc7QZEO3+3KhIdpfkJsXReREREREVEJ2oiIiIiAqITlREREREBUQnKiIiIqIC\nohMVERERUQHRiYqIiIiogOhERURERFRAnGz/GVCpUiXMmzcPANCzZ084OztLBa0FCoIbL1++nO1f\nlJWVpWk1RdSMvr4+WrRoAaAgaHhiYiJ+/PHHctaqAqLu8HbKwCePjyCclyZF0zaPHz9eoeDR+fn5\n9OTJE3ry5AmNHDlS43ZbWlqSp6cneXp6EhFRp06dyjWftLW1WUBoXrS1taWu0dHRoYULF9KVK1eo\nT58+1KdPn3LNbz09Pfryyy9p1qxZFBoaKhW0/ObNmxp9fh/jb9vGxoZsbGzo6dOndP/+/VIDuRe2\nRR5iTVQDmJmZ4a+//gIAPHjwoJy1KRl+x8RBgwbh8OHDbKsMTTB48GAW3JfjOMyfPx+DBw/WWPqF\nMTAwwIIFC4pFBPL19cXChQtRv359AMCSJUvQp08fAGDBks+fP692ffT19dGpUycEBQWxPHF2doaO\njg7Gjx/Prvvyyy9Rq1atYvdnZGTg/v37atGlZcuWAIARI0Zg6tSpqFKlCnbt2gUAmDx5slrSEAJd\nXV0WWNvOzg5EhNq1a6v8XMQ+UREREREV+ORrojVq1ABQsBlVYWbOnCn1uUWLFiW+cTZv3owXL16o\nX8H//+4uXboAAEJDQwVJoyRsbGyUvmfYsGEICwvDqlWrIJFIBNBKGn19fbbVCo+mw/fxe5I3atQI\np06dYrXNwowdOxY6OjpswzN+E73s7GxBaqA88+bNw7Jly/Dy5UvWny1LPwAgIiQmJuLu3btYvXo1\ngIKtzWNiYlTWw8DAAFu3bgUAtp0Jx3EYOnQogILf4ebNmxESEqJyWmWhffv2+OGHH6Cnp8fW7T94\n8AC//fYbzMzM0LNnT/UnKkBXp8LwyaMMfRsODg70999/U2JiIiUmJhbbVIyn6HF5IuSmX//88w/r\nc/zpp5/KbHNZ5eLFi1L9npGRkXT69Gn66quvpKSwnrxMmDBBI31kbdu2LZYnrq6uGntGZmZmtGjR\nIlq0aBHrQ8zJyaHY2FiKjY2lQ4cOUU5OjlQfIy/p6enUs2fPMtldmgwdOpSGDh1KWVlZMtPmOI7+\n++8/Cg0NpdDQUDp16hQNGzZMsOe0fPlyVjZiYmJo+fLlFBgYKFVmYmJiNLZRHQAyNDQkQ0NDWrZs\nGWVlZUlt7sdv8BcaGkrOzs5S52JiYqhhw4YKl115fJI10aVLl+K7775jG1TJggpFXXn69CmuX79e\n7Jr79++z0cuybkKmLCtWrMDy5cs1khbPqFGjYGdnxz7Lq5VERUWxLZutra0BAPXq1dOIjmPHji12\n7MKFCxpJ29LSEtu2bYObmxs79vDhQ3h6euLUqVMACrYJd3Z2hpWVFQCwLZ4jIyNx6tQpXLx4Ue16\nGRkZYdWqVQAKanjHjh2T6lPfs2cPiAjJycms1pWZmal2PXh27dqFIUOGIC4uDkBBv3lISAgqVaqE\ngQMHAgAkKeAuAAAQs0lEQVT8/f1RvXp1jBgxQjA9isJvP87XhnlOnz4NAPj6669hb28PPz8/qfMH\nDhzA8+fPVVdAzZVLpeCTh4JvnH79+lG/fv3YCHNRSU5Opri4OIqLi6PFixfT4sWLyd7envT09DRW\no5ElhWt4ytqsKbGysqKVK1cWq4l6eHioLQ15duvq6tLLly+l8vLKlStUqVIlwe2uUqUKPXnyhNU8\nc3Jy6Pr161S7dm0CQJ07d6bOnTvT27dvWc3m9OnTZGJiQiYmJirZXZqsXLmSpZmWlka9e/cut/LB\ntxTy8/Np+fLltHz5cqnztra2ZGtrS5GRkZSfn0+pqalERPT7778LrhsPx3EUHx9Pbdu2JQBkZ2dH\ndnZ29OHDh2K1dyJSqvVZEuLAkoiIiIgqqLduqRx88lDgTWBtbU0xMTEUExPDaispKSl08+ZNunnz\nJo0fP54aNGhQbm9qedKtWzdKTU396GuidevWpZcvXxaric6ZM0etNQZZx7t06VKsVTFv3jxB7dXR\n0SEdHR3WB5qTk0OnT5+m06dPs2saNWpEb9++ZbXQ1NRUOnLkCJmamqrF7pLEyMiInj9/zmpOR44c\nIV1d3XIrH0uXLiUiotevX1PdunWpbt26Mq87f/681LhEXFyc4LoV7vs8fvw4O87r6eXlRQ4ODpSU\nlMR0y8nJUbg/lM9DuX5MCOeoKMoUsPr16xf7oWl68nBZ5MSJE5Sfn8+6GZSxWVNib29P8fHxMiff\nDx48WG3pFLWbbwK+efOG5em5c+fo3LlzZG1tLajNEydOpIkTJ7If4Nq1a6XOGxoa0u7du6WagLt2\n7VKL3aWJrq4urVmzRirtpUuXlmsZ4fNo5cqVJV43a9YsVnaIiN68eSO4boWdaGxsLBkbG0udNzEx\noeDgYCnf4eXlpXQeyuOTGVh69eoVG2jo3bs3ALAJvh8zTZs2BQD8/PPP5axJcSwsLAAAe/fuhbm5\nebHzY8eOxd9//y1Y+rq6xYvfhw8fAADv378XLF2gYBoTT3p6Og4fPix13svLCxMmTGCfFy5cCB8f\nH0F14unatSuGDRsmdeyrr75CZmYmAgMD2bHo6GjEx8drRCeeJ0+elHi+WbNmUp9fvXolpDoAgN9+\n+w0AMHXqVFSrVg3ff/89VqxYAUdHRwDAmjVr0K5dOwBgA4Br1qxRW/qfjBOVSCTIzc2VOtapUyfs\n3bu3nDQqHUdHR5iZmSEyMpLNrRMaHR0d5pwqV64s9zojIyM2wuzg4FDs/K1bt3DixIkS95ZRBUND\nQ+YQ+HmsT548wcqVKwVJrySqVKmCgQMHIjw8HADQr18/jB07FmlpaZg7dy4A4OjRo0hOThZUj+rV\nqwMANm3ahAYNGkida9++PZuXyRMTE4Pdu3fjwYMHgr7sFIF/CfMb1vGsWLFC8LR/+eUXAMDIkSNh\namqKBQsWIC8vD7NmzQLwv5kmycnJmDZtGoCCeb1qQ6CWukLwyUPBKvW4ceNo3LhxrEoeHh5O5ubm\nZG5uXq5NHXkyY8YMys/Pp1GjRhVrGgiRnpmZGS1ZsoRu375Nt2/flrs+vqS18//++y/9+++/Svf7\nKSKF7TYzMyvWPXP8+HHS0tIiLS0twfOmfv36VL9+fTp8+DBxHEdZWVl0584dunPnDmse+vn5qd3u\nkuTUqVN06tQpufNB5cmePXsEf15LliwhiURC169fl3me7x4pXJaEKufy5OrVq8VG4ImIcnJyyM/P\nj/T19VXKQ3mIo/MiIiIiqqD26qUS8MlDwbeBgYEBGRgY0JMnT1jt5dKlS3Tp0iUyNDTU6FtPEVm2\nbBnl5+cXi+yjjM2KipWVFR0+fFhuDVPRmujo0aNp9OjRgjyPwnbXq1dPqhaakZFBy5Yt03geNW/e\nXGbt7s2bN9SoUSO1212SPHjwgB48eEAcx1FeXh7t2LGD1q9fT+vXr6eWLVtSkyZNqEmTJjRgwAAa\nMGAAW8UUFRVFFhYWZGFhIeizIipYARgVFUVRUVE0fvx4qlatGrm7u1NYWBiFhYWx/AwMDBSknMuS\nSpUqUaVKleju3btSZSo6Opqio6Np+PDharFdrh8TxDsqiDIFrKj8+eefUoU+NzeXOnbsqJFMU1Qk\nEgk9ePCA6tSpU6YflaJiYGBAT58+VciBluZEf/nlF/rll1/YZHN1SmG7Fy5cKFXgU1JSqHHjxhrP\nI11dXWrZsiX99ddfxRzplStXyNraWuWZAorm97Vr1+jatWuUnZ1N3bp1K/X6wMBA4jiO4uLiqFq1\nalStWjVBn9XevXsVLk9r165VezmXJ0FBQRQUFFSse4h/nuoqu3L9mFAOUhGUKWBFRU9Pj/bv3y/1\n0AICAsjR0VEjGafog1+wYIHM4+pMp3fv3go70NKcKC+nTp2iLl26kI6OjlqfB///ypUri61QUmda\nykrR6Uy8XL16la5evaqSI1U0v3lHuGbNGmrXrl2p1wcHBxPHcfTq1SuqWrUqVa1aVdBnpKenR97e\n3nT27FkmmZmZFB4eTtevX6fr169r1IlaW1vT8ePHpSpSJ06coPj4eDYXNCcnh0aMGKGWsivXjwni\nHRVEmQImSwwNDcnPz4/8/Pykln7WqFFD0MwrTZo1a0bNmjUjiUQicwGAKjbLEkdHxzI50adPn5Za\ng50yZYra9Cxs97Zt26ScqDoDnSgr1tbWlJyczJqpdnZ2tGHDBiln2rVrV7XYXZK4u7uTu7s7W77o\n5OQk87o6depQnTp1KCwsjDiOo/3795fbs2vWrBlZWVmRo6OjVDnUhBOdM2eOVKARPvDKmjVrpI6v\nXr1a5bRKQhxYEhEREVGBT2aeqCwyMzNZlJsBAwbAyMgIxsbGaNeuHYskXx7w0b1PnjzJIt4ISfPm\nzZW6/uDBg/D29sa7d+8A/G+e5qhRo9CxY0cAQLVq1XD37l2cOXNGvcqiYP5qjx49pI6pdd6ekujo\n6MDExIQ9j2fPnmHx4sVo2bIlnJ2dAQAzZsxAUFCQoHro6+sDAHJzc2FpaYnjx4+zeaonTpxAUlIS\nRowYwaKA8XNJhZ6/WhKPHz8GANja2mo87YULF0JLSws3b94E8L+J9DY2NtDS0mKRrfi/giFUU10R\n+OShQjWb7wsqHFO0Xr165da8sbKyopCQEAoJCaFffvlFbtNAnWkaGxuX2oQ/cOAAHThwgJo2bVri\nd1WpUoWqVKkiyLJL3u5q1arRu3fvWH7l5uaWqpeQsm7dOuI4jnVv8Md79uzJmoTZ2dnUqlUrlexW\nVNavX1+sbzYqKooCAwMpLy9P6nheXl6Z9VKn8M15Pk+Fbs7b2dlRWloaSSQSmjlzJs2cOZNq1qxJ\nW7ZsodzcXKk+UXU8n5L4pGuiADB9+nQABfsYAcC1a9fw5s2bctMnLy8PKSkpADTwBlSA58+fY/Dg\nwXj27BkAlBqlPj09XeqvELx9+1Yq7qWfnx9bLVQeGBkZyTxub2/P/n/79i0SExM1os/ixYsRExMD\nV1dXdO7cGQBQt25d1K1bV+q6K1euYOzYsWqJWK8uSKAVbkWxsLBgK/P4FUubNm2Suubo0aMAIHyU\nfYEqmQrBJw8F3gR16tShu3fv0t27d8nKyooA0NSpU9nbRiKRUF5eHi1atKhc38h2dnas9idvtFRR\nmxUVPT09qRVKL168oBcvXtCECRNUWqWhbuHtrl27NiUkJNDr16/p9evXKg3aqEM8PDxYAAuJREJp\naWmUlpYmVevr0aOHynYrK46OjuTi4kIuLi7k4+NDPj4+tG7dOmrfvj21b99eIyu7lNFV0wNLXl5e\nxSLY83L+/HlycHAgBwcHtaRVEuLAkoiIiIgqCFXLVAQ+eSjwJpg8eTJ7ywwZMoQaNGhAz549k3r7\neHt7l/sb2c7OTirsnSxR1OaKJoXtXrduHcu38uwPBUBaWlo0fvz4YuUzJiaGJk2aRJMmTSq233xZ\n7a6oUh41UQMDA/r5559ZTfTw4cO0a9cucnZ2VnjXAWXyUK4fU5tHLAPKFLA2bdrQmzdvWFzDV69e\nSTnQv//+m2xtbcu9MNnZ2dH06dNp+vTpJWZIeetZHiLaXXGFX3q5du1ays/PJ1dX1wpld0lo/b+h\n5YKWlhaISOEBGH4qzuTJk9G9e3fcv38fERERAAAfHx+NbO2rDpSxuSIh2v15UZHsLslNflJOtKLw\nOdoMiHZ/blQku0tyk+LAkoiIiIgKiE5URERERAVEJyoiIiKiAuXaJyoiIiLyqSPWREVERERUQHSi\nIiIiIiogOlERERERFRCdqIiIiIgKiE5URERERAVEJyoiIiKiAqITFREREVGBcotsv2rVKoSGhkJL\nSwuLFy9Wep+gT4Xbt29j1qxZsLOzAwA0atQIkyZNwvz58yGRSGBlZYX169ejcuXK5ayp+oiIiMB3\n332HcePGwcPDA3FxcTLtPXnyJHx9faGtrQ03Nze4urqWt+plpqjNCxcuxKNHj9iOCxMnToSTk1OF\nshkA1q1bh3v37iE/Px/ffvstHBwcKnxeF0M9Qe2U4/bt2zR58mQiInr+/Dm5ubmVhxoa4datWzRj\nxgypYwsXLqQzZ84QEZG3tzf5+fmVh2qCkJGRQR4eHuTp6Un79+8nItn2ZmRkUO/evSk1NZWysrLo\n66+/pg8fPpSn6mVGls0LFiygwMDAYtdVFJuJiIKDg2nSpElERJSUlETdunWr8Hkti3JpzgcHB6Nn\nz54ACnYsTElJEXRPn4+N27dvs90unZ2dERwcXM4aqY/KlStj165dsLa2Zsdk2RsaGgoHBwcYGxtD\nX18frVq1En4vHIGQZbMsKpLNANC2bVts3rwZAGBiYoKsrKwKn9eyKBcnmpCQAHNzc/bZwsIC8fHx\n5aGKRnj+/DmmTJmCESNG4MaNG8jKymLNd0tLywplu66uLtv6l0eWvQkJCbCwsGDXfMplQJbNAHDg\nwAGMGTMGP/zwA5KSkiqUzUDBVtOGhoYACjaF69q1a4XPa1l8FLt9UgVevl+3bl1Mnz4dffv2RUxM\nDMaMGSMVPLoi2y4LefZWtOcwaNAgmJmZoWnTpvDx8cHWrVvRsmVLqWsqis0XL17E0aNH8fvvv6N3\n797s+OeS1+VSE7W2tkZCQgL7/P79e1hZWZWHKoJjY2ODfv36QUtLC7Vr10bVqlWRkpKC7OxsAMC7\nd+9KbQZ+6hgaGhazV1YZqEjPoWPHjmjatCkAoHv37oiIiKiQNl+7dg07duzArl27YGxs/Fnmdbk4\n0c6dO+P8+fMAgEePHsHa2hpVqlQpD1UE5+TJk9izZw8AID4+HomJiRg6dCiz/8KFC+jSpUt5qig4\nnTp1Kmavo6MjHj58iNTUVGRkZCAkJARt2rQpZ03Vx4wZM9h+8Ldv34adnV2FszktLQ3r1q3Dzp07\n2SyEzzGvyy0U3oYNG/Dvv/9CS0sLS5cuRZMmTcpDDcFJT0/H3LlzkZqairy8PEyfPh1NmzbFggUL\nkJOTA1tbW6xevRqVKlUqb1XVQlhYGNauXYvY2Fjo6urCxsYGGzZswMKFC4vZe+7cOezZswdaWlrw\n8PDAwIEDy1v9MiHLZg8PD/j4+MDAwACGhoZYvXo1LC0tK4zNAODv748tW7agXr167NiaNWvg6elZ\nYfNaFmI8UREREREVEFcsiYiIiKiA6ERFREREVEB0oiIiIiIqIDpRERERERUQnaiIiIiICohOVERE\nREQFRCcqIiIiogL/B0H5pzbwQ42uAAAAAElFTkSuQmCC\n","text/plain":["<Figure size 576x396 with 1 Axes>"]},"metadata":{"tags":[]}}]},{"metadata":{"id":"SEcarPTtQ_y_","colab_type":"text"},"cell_type":"markdown","source":["## Run training"]},{"metadata":{"id":"WcpW0zhjXvzi","colab_type":"code","outputId":"f2ea5354-8aaf-4dc7-87e1-fca9c4536d05","executionInfo":{"status":"error","timestamp":1553211214680,"user_tz":240,"elapsed":363,"user":{"displayName":"Vinay Viswanadham","photoUrl":"","userId":"17038328966780750763"}},"colab":{"base_uri":"https://localhost:8080/","height":2085}},"cell_type":"code","source":["import time\n","import math\n","\n","n_iters = 100000\n","print_every = 5000\n","plot_every = 1000\n","\n","\n","# Keep track of losses for plotting\n","current_loss = 0\n","all_losses = []\n","\n","def timeSince(since):\n","    now = time.time()\n","    s = now - since\n","    m = math.floor(s / 60)\n","    s -= m * 60\n","    return '%dm %ds' % (m, s)\n","\n","start = time.time()\n","\n","for i in range(1, n_iters + 1):\n","    i_input, i_output = randomTrainingExample(input_mnist,output_mnist)\n","    output, loss = train(input_tensor = i_input, output_tensor = i_output, loss_criterion = criterion,in_rnn = test_rnn)\n","    current_loss += loss\n","\n","    # Print i number, loss, name and guess\n","    if i % print_every == 0:\n","        guess, guess_i = categoryFromOutput(output)\n","        correct = '✓' if guess == category else '✗ (%s)' % category\n","        print('%d %d%% (%s) %.4f %s / %s %s' % (iter, iter / n_iters * 100, timeSince(start), loss, line, guess, correct))\n","\n","    # Add current loss avg to list of losses\n","    if i % plot_every == 0:\n","        all_losses.append(current_loss / plot_every)\n","        current_loss = 0\n"],"execution_count":13,"outputs":[{"output_type":"stream","text":["tensor([0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,\n","        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,\n","        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,\n","        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,\n","        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,\n","        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,\n","        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,\n","        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,\n","        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,\n","        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,\n","        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,\n","        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,\n","        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,\n","        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0745, 0.1137, 0.0627, 0.0510,\n","        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,\n","        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,\n","        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.6667, 0.8824, 0.9882, 0.8431,\n","        0.8118, 0.6627, 0.6627, 0.2706, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,\n","        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,\n","        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.4941, 0.9922, 0.9882, 0.9882,\n","        0.9882, 0.9922, 0.9882, 0.9882, 0.9882, 0.2980, 0.0000, 0.0000, 0.0000,\n","        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,\n","        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.8824, 0.9922, 0.9882,\n","        0.9882, 0.9882, 0.9922, 0.9882, 0.9882, 0.9882, 0.9804, 0.2941, 0.0000,\n","        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,\n","        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.1490, 0.8863, 1.0000,\n","        0.9922, 0.8078, 0.4431, 0.3961, 0.2980, 0.8745, 0.9922, 0.9961, 0.8941,\n","        0.1725, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,\n","        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.1490,\n","        0.8941, 0.9882, 0.6314, 0.0275, 0.0000, 0.0000, 0.4784, 0.9882, 0.9922,\n","        0.9882, 0.6588, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,\n","        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,\n","        0.0000, 0.1216, 0.4157, 0.1216, 0.0235, 0.0000, 0.0000, 0.0745, 0.9059,\n","        0.9922, 0.9882, 0.6588, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,\n","        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,\n","        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,\n","        0.4902, 0.9922, 0.9882, 0.9529, 0.0980, 0.0000, 0.0000, 0.0000, 0.0000,\n","        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,\n","        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,\n","        0.0000, 0.8863, 0.9961, 0.9922, 0.6588, 0.0000, 0.0000, 0.0000, 0.0000,\n","        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,\n","        0.0000, 0.0000, 0.0745, 0.2235, 0.2235, 0.2235, 0.2235, 0.2235, 0.0000,\n","        0.0000, 0.2235, 0.9529, 0.9922, 0.9882, 0.6588, 0.0000, 0.0000, 0.0000,\n","        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,\n","        0.0000, 0.0000, 0.5176, 0.8431, 0.9882, 0.9922, 0.9882, 0.9882, 0.9882,\n","        0.7765, 0.7725, 0.8431, 0.9882, 0.9922, 0.9137, 0.2431, 0.0000, 0.0000,\n","        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,\n","        0.0000, 0.0000, 0.4941, 0.9529, 0.9882, 0.9882, 0.9922, 0.9882, 0.9882,\n","        0.9882, 0.9922, 0.9882, 0.9882, 0.9882, 0.9922, 0.8667, 0.2980, 0.0000,\n","        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,\n","        0.0000, 0.0000, 0.0000, 0.9961, 0.9922, 0.9922, 0.9922, 0.9961, 0.9922,\n","        0.9922, 0.9922, 0.9961, 0.9922, 0.9922, 0.9922, 0.9961, 0.9922, 0.9922,\n","        0.6000, 0.0510, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,\n","        0.0000, 0.0000, 0.0000, 0.0000, 0.9922, 0.9882, 0.9882, 0.9882, 0.9922,\n","        0.9882, 0.9882, 0.9882, 0.9922, 0.9882, 0.9882, 0.9882, 0.9922, 0.9882,\n","        0.9882, 0.9882, 0.7608, 0.0745, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,\n","        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.4667, 0.8784, 0.9882, 0.9882,\n","        0.9922, 0.9882, 0.9882, 0.6941, 0.6118, 0.2196, 0.2196, 0.2196, 0.2196,\n","        0.5843, 0.9882, 0.9882, 0.9922, 0.8431, 0.4314, 0.0392, 0.0000, 0.0000,\n","        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0745, 0.1098,\n","        0.3059, 0.1098, 0.1098, 0.1098, 0.0118, 0.0000, 0.0000, 0.0000, 0.0000,\n","        0.0000, 0.1255, 0.8941, 0.9882, 0.9922, 0.9882, 0.8392, 0.0588, 0.0000,\n","        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,\n","        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,\n","        0.0000, 0.0000, 0.0000, 0.0000, 0.6392, 0.9961, 0.9922, 0.9922, 0.7961,\n","        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,\n","        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,\n","        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.6392, 0.9922, 0.9882, 0.9882,\n","        0.9882, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,\n","        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,\n","        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0980, 0.6588, 0.8784,\n","        0.9882, 0.4980, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,\n","        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,\n","        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,\n","        0.0745, 0.1098, 0.0118, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,\n","        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,\n","        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,\n","        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,\n","        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,\n","        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,\n","        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,\n","        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,\n","        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,\n","        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,\n","        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,\n","        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,\n","        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,\n","        0.0000])\n"],"name":"stdout"},{"output_type":"error","ename":"RuntimeError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mRuntimeError\u001b[0m                              Traceback (most recent call last)","\u001b[0;32m<ipython-input-13-fc7a07a535b4>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     22\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mi\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mn_iters\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     23\u001b[0m     \u001b[0mi_input\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mi_output\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mrandomTrainingExample\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minput_mnist\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0moutput_mnist\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 24\u001b[0;31m     \u001b[0moutput\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mloss\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtrain\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minput_tensor\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mi_input\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0moutput_tensor\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mi_output\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mloss_criterion\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcriterion\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0min_rnn\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtest_rnn\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     25\u001b[0m     \u001b[0mcurrent_loss\u001b[0m \u001b[0;34m+=\u001b[0m \u001b[0mloss\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     26\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-9-8d37e4829095>\u001b[0m in \u001b[0;36mtrain\u001b[0;34m(input_tensor, output_tensor, in_rnn, loss_criterion)\u001b[0m\n\u001b[1;32m     12\u001b[0m     \u001b[0;32mfor\u001b[0m \u001b[0mi\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minput_tensor\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msize\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     13\u001b[0m       \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minput_tensor\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 14\u001b[0;31m       \u001b[0moutput\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mhidden\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0min_rnn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minput_tensor\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mhidden\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     15\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     16\u001b[0m     \u001b[0;31m# compute the value of the loss function\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/torch/nn/modules/module.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, *input, **kwargs)\u001b[0m\n\u001b[1;32m    487\u001b[0m             \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_slow_forward\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0minput\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    488\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 489\u001b[0;31m             \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mforward\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0minput\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    490\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0mhook\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_forward_hooks\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvalues\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    491\u001b[0m             \u001b[0mhook_result\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mhook\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minput\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mresult\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-6-82d93e0e6c83>\u001b[0m in \u001b[0;36mforward\u001b[0;34m(self, input, hidden)\u001b[0m\n\u001b[1;32m     12\u001b[0m   \u001b[0;32mdef\u001b[0m \u001b[0mforward\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minput\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mhidden\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     13\u001b[0m     \u001b[0;31m# the forward function\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 14\u001b[0;31m     \u001b[0mcombined\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtorch\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcat\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minput\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mhidden\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;31m# combine the new inputs and the state of the hidden layer from the past training timepoint\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     15\u001b[0m     \u001b[0mhidden\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mi2h\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcombined\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;31m# generate the state of the hidden layer\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     16\u001b[0m     \u001b[0moutput\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mi2o\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcombined\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;31m# generate the input going to the output\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mRuntimeError\u001b[0m: zero-dimensional tensor (at position 0) cannot be concatenated"]}]},{"metadata":{"id":"B9FlMl4vUmh2","colab_type":"text"},"cell_type":"markdown","source":["# Partitioned hidden layers"]},{"metadata":{"id":"GXCltPGqK-nS","colab_type":"code","colab":{}},"cell_type":"code","source":["# create a basic RNN with partitioned hidden states--effectively two hidden layers that will communicate with each other as well as with themselves\n","\n","class basicRNN (torch.nn.Module):\n","  def __init__(self, input_size, hidden_size, output_size):\n","      # initialize\n","    super(RNN, self).__iniit__()\n","    \n","    self.hidden_size = hidden_size # both hidden layers will have the same size\n","    self.i2h1 = nn.Linear(input_size + hidden_size, hidden_size)\n","    self.i2o = nn.Linear(input_size + hidden_size, output_size)\n","    self.softmax = nn.LogSoftmax(dim=1)\n","  \n","\n","  def forward(self, input, hidden):\n","    # the forward function\n","    combined = torch.cat((input, hidden), 1) # combine the new inputs and the state of the hidden layer from the past training timepoint\n","    hidden = self.i2h(combined) # generate the state of the hidden layer\n","    output = self.i2o(combined) # generate the input going to the output\n","    output = self.tanh(output) # put the combined input through the tanh activation function as the output\n","    return output, hidden # return the output and the hidden state\n","\n","  def initHidden(self):\n","    return torch.zeros(1, self.hidden_size) # initialize the hidden layer. This will be useful when starting the training sequence\n","  \n","\n"],"execution_count":0,"outputs":[]},{"metadata":{"id":"zc9gp5aS84yn","colab_type":"code","colab":{}},"cell_type":"code","source":["\"\"\"\n","encoder = LSTM(latent_dim, return_state=True)\n","encoder_outputs, state_h, state_c = encoder(encoder_inputs)\n","# We discard `encoder_outputs` and only keep the states.\n","encoder_states = [state_h, state_c]\n","\n","# Set up the decoder, using `encoder_states` as initial state.\n","decoder_inputs = Input(shape=(None, num_decoder_tokens))\n","# We set up our decoder to return full output sequences,\n","# and to return internal states as well. We don't use the \n","# return states in the training model, but we will use them in inference.\n","decoder_lstm = LSTM(latent_dim, return_sequences=True, return_state=True)\n","decoder_outputs, _, _ = decoder_lstm(decoder_inputs,\n","                                     initial_state=encoder_states)\n","decoder_dense = Dense(num_decoder_tokens, activation='softmax')\n","decoder_outputs = decoder_dense(decoder_outputs)\n","\n","# Define the model that will turn\n","# `encoder_input_data` & `decoder_input_data` into `decoder_target_data`\n","model = Model([encoder_inputs, decoder_inputs], decoder_outputs)\n","\"\"\"\n","\n","Hello"],"execution_count":0,"outputs":[]}]}